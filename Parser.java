/**
 * Parser class which can generate strings with brackets and
 * check strings for valid brackets
 *
 * @author Alex Thorrold
 */
public class Parser {

    // Minimum size string that can be generated by getString() method
    public static final int MIN_STRING_SIZE = 0;
    // Maximum size string that can be generated by getString() method
    public static final int MAX_STRING_SIZE = 10;

    // Stack used to check validity of equations
    Stack stack;

    /**
     * Constructs a new parser and initialises the stack
     */
    public Parser() {
        stack = new Stack();
    }

    /**
     * Checks the validity of brackets in a passed string
     * @param s String to be checked
     * @return Whether the string is valid or not
     */
    public boolean check(String s) {
        if (s == null) {
            return true;
        }

        // Loops through all characters in the string, checking
        // validity if the character is a bracket
        for (int i = 0; i < s.length(); i++) {
            // Gets substring containing a single character at the current position in the loop
            String sub = s.substring(i, i + 1);

            if (sub.equals("(")) {
                stack.push(sub);
            }
            else if (sub.equals(")")) {
                if (stack.pop() == null) {
                    return false;
                }
            }
        }

        return stack.isEmpty();
    }

    /**
     * Builds a new string containing left and right brackets
     * @return String of left and right brackets in a random order
     */
    public String getString() {
        // StringBuilder for appending to new string
        StringBuilder sb = new StringBuilder();
        // Will be used to store random numbers during creation of the string
        int rand;

        // Builds a string of up to MAX_STRING_SIZE length containing left and right brackets
        for (int i = 0; i < MAX_STRING_SIZE; i++) {
            // Gets a random number between MIN_STRING_SIZE and MAX_STRING_SIZE
            rand = (int)(Math.random()*(MAX_STRING_SIZE-MIN_STRING_SIZE+1)+MIN_STRING_SIZE);

            // Has a 1 in MAX_STRING_SIZE+1 (MIN inclusive) chance of
            // finishing string creation each time
            if (rand == MIN_STRING_SIZE) {
                break;
            }

            // Gets a random number 0 or 1
            rand = (int)(Math.random()*2);

            if (rand == 0) {
                sb.append('(');
            }
            else {
                sb.append(')');
            }
        }

        return sb.toString();
    }
}
